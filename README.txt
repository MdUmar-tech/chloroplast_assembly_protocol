# Carlos P Cantalapiedra (1), Ruben Sancho (1,2), Bruno Contreras Moreira (1,3)
# 1) Estacion Experimental de Aula Dei-CSIC, Zaragoza, Spain
# 2) Escuela Politecnica Superior de Huesca, U.Zaragoza, Spain
# 3) Fundacion ARAID, Zaragoza, Spain

# This file explains to use the attached scripts for assemblying chloroplast genomes 
out of whole-genome reads.

0. Software dependencies
========================

This protocol has been tested on Linux x86_64 systems, although it should also work on Mac-OSX 
settings. It requires perl, which should be installed on all Linux environments, plus 
some third-party programs listed below, which are provided pre-compiled. In order to check 
whether they work on your machine, or to re-compile them otherwise, for instance on 
Mac-OSX, please run on the terminal:

perl ./install.pl

The script will tell which programs are set up (OK) and which require installing a compiler 
(gcc or g++) or java in order to run.

This is the full list of software, located in bin/, required for the protocol:
 
DUK March032011 http://duk.sourceforge.net
Trimmomatic 0.32  http://www.usadellab.org/cms/?page=trimmomatic
FastQC  V0.10.1 http://www.bioinformatics.babraham.ac.uk/projects/fastqc
musket  1.0.6 http://musket.sourceforge.net
BWA 0.7.6a  http://bio-bwa.sourceforge.net/
velvet  1.2.08  https://github.com/dzerbino/velvet/tree/master
SSPACE  2.0 http://www.baseclear.com/bioinformatics-tools
GapFiller v1-11 http://www.baseclear.com/bioinformatics-tools
seqtk NA  https://github.com/lh3/seqtk
split_pairs v0.5  [this site, uses seqtk code]

Optionally samtools is used in 'HOWTOcheck_assembly.txt':

samtools 0.1.19 [http://samtools.sourceforge.net]

1. Protocol at a glance
=======================
# Create directory with your samples ("SAMPLESDIR")
./0_get_cp_reads.pl SAMPLESDIR ASSEMBLYDIR
./1_cleanreads.pl ASSEMBLYDIR FASTA_REF_GENOME
# Create config file ("ASSEMBLYCONF")
./2_assemble_reads.pl ASSEMBLYDIR ASSEMBLYCONF --ref FASTA_REF_GENOME

2. Test run
===========
2.1. Using a reference genome
============================

# The input files for this test are within 
# test/ directory

## Fish cp reads from WGS library
./0_get_cp_reads.pl test test_cp

# Clean and trim reads to remove poor quality segments
./1_cleanreads.pl test_cp reference.fna 

# Using a reference (reference.fna) allows the previous
# script to output mean insert sizes and orientations for 
# each input sample.
# This information, which is needed for the assembly step
# is included in the file cleanreads.txt within
# the working directory (test_cp/cleanreads.txt in the example).
# In this example it contains:

#1 testMP cp-testMP.wind15_28.3crop70.mlen60.corr.12.fq.gz RF 4295 Sanger
#2 testPE cp-testPE.wind15_28.3crop70.mlen60.corr.12.fq.gz FR 221 Sanger

# Note also that the last field corresponds to base quality encoding
# (see File Formats section below), which is set to Sanger by default but
# should be changed according to the FASTQ encoding being used.
#
# To do this, from cleanreads.txt, we might create different independent files
# to configure different assemblies.
#
# Please, copy such file to a new one and leave only the
# rows to be used for the assembly, BEING SURE that
# row named "#1" corresponds to PE reads.
#
# For example:

cp test_cp/cleanreads.txt test_cp/assembly_pe

# and edit test_cp/assembly_pe file leaving only one row:

#1 testPE cp-testPE.wind15_28.3crop70.mlen60.corr.12.fq.gz FR 221 Sanger

# Then, assemble cp genome
./2_assemble_reads.pl test_cp assembly_pe --ref ./reference.fna

# A second row (#2) could
# be included to work with additional MP reads.
# To perform the assembly with auxiliary MP reads, leave two rows
# in the config file as follows:

cp test_cp/cleanreads.txt test_cp/assembly_mp

#1 testPE cp-testPE.wind15_28.3crop70.mlen60.corr.12.fq.gz FR 221 Sanger
#2 testMP cp-testMP.wind15_28.3crop70.mlen60.corr.12.fq.gz RF 4295 Sanger

# and assemble cp genome combining PE + MP libraries

./2_assemble_reads.pl test_cp assembly_mp --ref reference.fna

2.2. de-novo, without reference genome
=====================================

# The input files for this test are within 
# test/ directory

## Fish cp reads from WGS library
./0_get_cp_reads.pl test test_cp_noref

# clean and trim reads to remove poor quality segments
./1_cleanreads.pl test_cp_noref noref

# Using a reference (reference.fna) allows the previous
# script to output mean insert sizes and orientations for  
# each input sample.
# However, when not using a reference genome, insert size and 
# orientation of reads can not be obtained from the previous script.
# The test_cp_noref/cleanreads.txt file generated by the previous script
# contains a base from which create a config file to include such information,
# which is needed for the assembly step.

#1 testMP cp-testMP.wind15_28.3crop70.mlen60.corr.12.fq.gz nd nd Sanger
#2 testPE cp-testPE.wind15_28.3crop70.mlen60.corr.12.fq.gz nd nd Sanger

# Note the "nd" values in orientation and insert size fields.
# Note also that the last field corresponds to base quality encoding
# (see File Formats section below), which is set to Sanger by default but
# should be changed according to the FASTQ encoding being used.
#
# We need to create a config file which includes 
# valid orientation and insert size values.
# To do this, from cleanreads.txt, we might create different independent files
# to configure different assemblies.

# First, copy the file test_cp_noref/cleanreads.txt to a custom config file

cp test_cp_noref/cleanreads.txt test_cp_noref/assembly_pe

# Then, leave one row corresponding to PE reads and add the required information
# The config file should look like:

#1 testPE cp-testPE.wind15_28.3crop70.mlen60.corr.12.fq.gz FR 221 Sanger

# Orientation is FR for most standard PE runs.
# However, MP runs could have other configurations (RF, for example).
# Insert size should be estimated somehow
# (likely from DNA size selection in web-lab previous to sequencing)
#
# Once you have prepared the configuration file, run the script as follows
# to assemble cp genome:

./2_assemble_reads.pl test_cp_noref assembly_pe --ref noref

# A second row (#2) could
# be included to work with additional MP reads.
#
# To perform the assembly with auxiliary MP reads, leave two rows
# and edit orientation and insert size of libraries
# in the config file as follows:

cp test_cp_noref/cleanreads.txt test_cp_noref/assembly_mp

# Then edit the file to specify PE (#1) and MP (#2) samples and 
# to include the required information:

#1 testPE cp-testPE.wind15_28.3crop70.mlen60.corr.12.fq.gz FR 221 Sanger
#2 testMP cp-testMP.wind15_28.3crop70.mlen60.corr.12.fq.gz RF 4295 Sanger

# and assemble cp genome combining PE + MP libraries
./2_assemble_reads.pl test_cp_noref assembly_mp --ref noref


3. Post-assembly inspection
===========================

The attached tutorial 'HOWTOcheck_assembly.txt' contains recipes to analyze and validate your 
assemblies.


4. Propagation of annotated features to assemblies
==================================================

If a good quality master annotation in GenBank format is at hand, it can be used to propagate 
its features to several assembled chloroplast genomes with accompanying script _annot_fasta_from_gbk.pl .
The way to invoke is as follows, assuming strain XYZ was assembled:

perl _annot_fasta_from_gbk.pl reference.gbk assembly.fa XYZ_chloroplast.gbk XYZ

NOTE: This script requires setting a valid path to BLAST+ binaries installed on your system.


5. Generating tracks from aligned assemblies
============================================

If several chloroplast assemblies are aligned they can then be further used to produce tracks for software CIRCOS <http://circos.ca>. Script _check_matrix.pl does just that; it requires setting a reference strain 
and a window size, please check the code. An example call would be:

perl _check_matrix.pl chloroplast_alignment.fna

A. File formats
===============
A.1 Format of cleanreads.txt and assembly config files
======================================================

Fields are separated by a single empty space:
1. File number: the file "#1" will be used as main PE file.
	A second file "#2" will be used as auxiliary MP file.
2. Name: a short name identifying each sample.
3. Input filename: file with clean reads to be used as input 
	for the assembly step.
4. Orientation: relative orientation of the paired and mate-pair reads.
	"nd" (non-defined): it should be changed to another value before assembly.
	"FR" (forward-reverse): typical of Illumina PE reads.
	"RF" (reverse-forward): found in some MP libraries and others.
5. Insert size: mean fragment size in the library.
	"nd" (non-defined): it should be changed to a valid value before assembly.
6. Base quality encoding: quality codes change from a sequencing platform to another.
	"Sanger": valid for example for Sanger, Illumina 1.9, Phred-33.
	"1.5": valid for example for Illumina 1.5 format, Phred+64.

B. Additional parameters
========================
B.1. Parameters affecting quality control
=========================================

The Musket error correction is optional and could be skipped with parameter
-s when calling 1_cleanreads.pl. For example:

./1_cleanreads.pl test_cp_noref noref -s

Several variables could be changed directly in the code of 1_cleanreads.pl
script. These correspond to Trimmomatic trimming and filtering procedures.

my $TRIM5 = 3; # 5' bases to remove, adjust as needed after inspection of FastQC reports
my $TRIM3 = 3; # 3' bases to remove
my $MINREADLENGTH = 60; # this will allow assemblying with kmers up to this size, decrease if required
my $MINSURVIVALRATE = 50; # a warning will be used if less than these %reads survive trimmomatic

##
